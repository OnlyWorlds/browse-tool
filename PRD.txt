# OnlyWorlds Browse Tool - Product Requirements Document

## Executive Summary

The OnlyWorlds Browse Tool is a desktop-first web application for viewing, editing, and showcasing structured world data using the OnlyWorlds open standard. It provides a two-panel interface with category navigation on the left and a working area on the right that contains both field editing and contextual edit areas, enabling worldbuilders to manage complex interconnected elements through a clean, schema-driven UI.

## Core User Experience

### Authentication Flow
1. User enters World Key + Pin on landing page
2. System validates against OnlyWorlds API
3. On success: Loads world metadata and all elements into memory
4. Stores credentials in localStorage for session persistence
5. Unlocks main application interface

### Main Interface Layout (2-Panel Design)
1. **Left Sidebar**: Category browser with collapsible sections
2. **Working Area** (Right): Split view containing:
   - **Element Section**: Element viewer/editor with all fields
   - **Edit Area Section**: Contextual editing space for selected field


### Key Interactions
- Click category header to expand/collapse element list
- Click element to load in working area
- Click field to activate edit area section
- Edit fields in various ways
- Toggle between Edit/Showcase modes
- Save changes back to API

## Technical Architecture

### Technology Stack
- **Framework**: Astro + React (@astrojs/react)
- **Styling**: Tailwind CSS
- **State Management**: 
  - Zustand for UI state
  - React Context for world/auth data
- **Routing**: Astro file-based routing
- **API**: OnlyWorlds REST API (https://www.onlyworlds.com/api/docs)
- **Deployment**: GitHub Pages via Actions

### Core Data Models

#### World State
```typescript
interface WorldState {
  worldKey: string;
  pin: string;
  metadata: WorldMetadata;
  elements: Map<string, Element>;
  categories: Map<string, Element[]>;
}
```

#### Element Structure
```typescript
interface Element {
  // Base properties (required)
  id: string;
  name: string;
  
  // Base properties (optional)
  description?: string;
  image_url?: string;
  tags?: string[];
  created_at?: string;
  updated_at?: string;
  is_public?: boolean;
  
  // Category-specific fields
  [key: string]: any;
}
```

## Feature Specifications

### 1. Authentication & World Loading

**Components Needed**:
- `AuthScreen`: World Key/Pin input form
- `WorldContext`: Global state provider
- `ApiService`: OnlyWorlds API wrapper

**Functionality**:
- Validate credentials via GET to OnlyWorlds API
- Fetch world metadata and all elements
- Store in Context and localStorage
- Show loading/error states
- Redirect to main app on success

### 2. Category Sidebar Navigation

**Components Needed**:
- `CategorySidebar`: Main sidebar container
- `CategorySection`: Collapsible category group
- `ElementList`: Scrollable element items
- `FilterBox`: Search/filter input

**Functionality**:
- Display ~20 OnlyWorlds categories as collapsible sections
- Show element count per category
- Click category header to expand/collapse
- Display elements with name (sorted alphabetically)
- "+" button per category for new element creation
- Filter box searches element names within categories
- Highlight currently selected element

### 3. Element Viewer/Editor (Center Panel)

**Components Needed**:
- `ElementPanel`: Main container with mode toggle
- `ElementViewer`: Read-only field display
- `ElementEditor`: Editable field interface
- `FieldRenderer`: Dynamic field component factory

**Field Types & Rendering**:
- **Text (string)**: Single-line or multi-line
- **Description (text)**: Multi-line textarea
- **Number**: Numeric input with validation
- **Boolean**: Toggle switch
- **Enum**: Dropdown with predefined + custom options
- **Link (element reference)**: Searchable dropdown of elements
- **Array of Links**: Multi-select with add/remove
- **Tags (string array)**: Simple comma-separated input or tag chips
- **Image URL**: URL input with preview

**Special Fields**:
- **Type/Subtype**: Dropdowns with category-specific options + custom entry
- **Category Fields**: Dynamically rendered based on element category schema

### 4. Contextual Edit Area (Within Working Area)

**Components Needed**:
- `EditArea`: Container that responds to field selection
- `TextEditor`: Large textarea for text fields
- `LinkEditor`: Element search and selection UI
- `NumberEditor`: Enhanced numeric input with increment/decrement
- `ArrayEditor`: List management for arrays

**Functionality**:
- Activates when user clicks a field in element section
- Provides expanded editing space
- Shows field-specific helpers:
  - Text: Character count, formatting preview
  - Links: Search elements, view linked element preview
  - Numbers: Slider/increment controls
  - Arrays: Drag-to-reorder, bulk operations

### 5. Reverse Link Display

**Components Needed**:
- `ReverseLinkSection`: Container below main fields
- `ReverseLinkGroup`: Groups by field/category

**Functionality**:
- Calculate which elements reference current element
- Group by: "Used by", "Located in", "Member of", etc.
- Click to navigate to referencing element
- Update dynamically when links change

### 6. Showcase Mode

**Components Needed**:
- `ShowcaseView`: Clean presentation layout
- `FieldToggler`: Exclude/include field controls
- `ExportButton`: PDF generation trigger

**Functionality**:
- Toggle from Edit to Showcase mode
- Display only fields with values by default
- Small toggle icon per field to exclude/include
- Clean, print-ready styling
- Export to PDF preserving layout
- Remember field preferences per element type

### 7. Save & Validation

**Components Needed**:
- `SaveButton`: Global save control
- `ValidationService`: Schema validation
- `DirtyStateTracker`: Change detection

**Functionality**:
- Track changes at field level
- Validate against OnlyWorlds schema
- Show validation errors inline
- Save via PUT (update) or POST (create)
- Update local state on success
- Show success/error toasts

## User Flows

### Flow 1: First-Time Access
1. Land on auth screen
2. Enter World Key + Pin
3. Click "Validate"
4. System loads world data
5. Redirect to main interface
6. See all categories in sidebar

### Flow 2: Edit Existing Element
1. Click category in sidebar (e.g., "Characters")
2. Click specific character
3. Element loads in working area (Edit mode default)
4. Click description field
5. Edit area opens with large text box
6. Make changes
7. Click Save
8. Changes persist to API

### Flow 3: Create New Element
1. Click "+" next to category
2. New element form appears
3. Fill required fields (name)
4. Select type/subtype from dropdowns
5. Add category-specific fields
6. Save to create

### Flow 4: Link Elements
1. Edit a Location element
2. Click "inhabitants" field
3. Edit area shows character search
4. Select multiple characters
5. Save to establish links
6. Navigate to a character
7. See reverse link "Located in: [Location Name]"

### Flow 5: Showcase & Export
1. View any element
2. Toggle to "Showcase" mode
3. See clean presentation
4. Click exclude icons to hide fields
5. Click "Export to PDF"
6. Download formatted document

## State Management Design

### Global State (Context)
- World metadata
- All elements map
- Category groupings
- Authentication status

### UI State (Zustand)
- Selected element ID
- Current mode (Edit/Showcase)
- Sidebar expansion states
- Filter values
- Field selection
- Dirty fields tracking

### Local State
- Form inputs
- Validation errors
- Loading states

## API Integration

### Endpoints Used
- `POST /api/validate`: Authenticate World Key + Pin
- `GET /api/world/{key}`: Fetch world metadata
- `GET /api/world/{key}/elements`: Fetch all elements
- `PUT /api/world/{key}/element/{id}`: Update element
- `POST /api/world/{key}/element`: Create element
- `DELETE /api/world/{key}/element/{id}`: Delete element

### Error Handling
- Network failures: Retry with exponential backoff
- Validation errors: Display inline
- Auth failures: Return to login
- Conflict errors: Offer merge resolution

## Testing Strategy

### Unit Tests
- Field renderers for each type
- Validation logic
- State management actions
- Reverse link calculation

### Integration Tests
- Auth flow end-to-end
- CRUD operations
- Navigation between elements
- Export functionality

### E2E Tests
- Complete user journeys
- Multi-element editing
- Performance with large datasets

## Performance Considerations

- Virtual scrolling for large element lists
- Debounced search/filter
- Lazy load element details
- Memoized reverse link calculations
- Optimistic UI updates

## Responsive Design

### Desktop First
- Two-panel layout optimal at 1440px+
- Working area splits dynamically based on field selection
- Minimum 1024px width supported

### Tablet Adaptation
- Working area sections stack vertically
- Sidebar becomes overlay
- Touch-friendly controls

### Mobile (Future)
- Single panel view
- Bottom navigation
- Simplified edit forms

## Development Phases

### Phase 1: Foundation (MVP Core)
1. Project setup and configuration
2. Authentication system
3. Basic layout structure
4. Category sidebar
5. Element viewer (read-only)
6. Simple field editing
7. Save functionality

### Phase 2: Advanced Editing (MVP Complete)
1. All field type renderers
2. Contextual edit area
3. Link field functionality
4. Reverse link display
5. Type/subtype system
6. Validation framework
7. Create new elements

### Phase 3: Polish & Export
1. Showcase mode
2. Field toggling
3. PDF export
4. Search/filter
5. Keyboard shortcuts
6. Loading states
7. Error handling

### Phase 4: Enhancement
1. Batch operations
2. Undo/redo
3. Conflict resolution
4. Offline support
5. Advanced filtering
6. Custom themes

## Success Metrics

- Load time < 3 seconds for worlds with 1000 elements
- Save operation < 1 second
- Zero data loss on save
- 100% schema compliance
- PDF export < 5 seconds
- Mobile responsive at 768px+

## Risks & Mitigations

### Technical Risks
- **Large datasets**: Implement pagination and virtual scrolling
- **Complex schemas**: Build robust field renderer system
- **API changes**: Version lock and migration strategy

### UX Risks
- **Complexity**: Progressive disclosure, good defaults
- **Learning curve**: Inline help, tooltips
- **Data loss**: Auto-save, confirmation dialogs

### Project Risks
- **Scope creep**: Strict MVP definition, phase gates
- **Testing burden**: Automated test suite, CI/CD
- **Browser compatibility**: Modern browsers only, polyfills as needed